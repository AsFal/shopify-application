version: 2.1

# Define the jobs we want to run for this project
jobs:

  tests:
    docker:
      - image: circleci/golang:1.15
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Run unit tests
          command: make unit_tests
      - run: make build
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
    
  system-tests:
    docker:
      - image: circleci/golang:1.15
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Run system tests
          command: make system_tests
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
    
          
  test-connection:
    docker:
      - image: arvindr226/alpine-ssh
    steps:
      - run: ssh -oStrictHostKeyChecking=no -v $USER@$IP "touch test.txt"
      - run: |
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> .aws_cred 
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> .aws_cred 
          scp .aws_cred $USER@$IP:.aws_cred
          source .aws_cred
          rm .aws_cred
      - run: ssh -oStrictHostKeyChecking=no -v $USER@$IP "IPA=$IP echo $IPA > test.txt"

  pull-and-deploy-staging:
    docker:
      - image: arvindr226/alpine-ssh
    steps:
      - checkout
      - run: ssh -oStrictHostKeyChecking=no -v $USER@$IP "touch init.txt"
      - run: |
          echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> .aws_cred 
          echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> .aws_cred 
          scp .aws_cred $USER@$IP:.aws_cred
      - run: ssh -oStrictHostKeyChecking=no -v $USER@$IP "cd shopify-application && ./deploy.sh"

# Orchestrate our job run sequence
workflows:
  version: 2
  all:
    jobs:
      - pull-and-deploy-staging:
          filters:
            branches:
              only:
                - master

      - test-connection:
          filters:
            branches:
              ignore:
                - master
      - tests:
          filters:
            branches:
              ignore:
                - master

      - system-tests:
          requires:
            - pull-and-deploy-staging
          filters:
            branches:
              only:
                - master
